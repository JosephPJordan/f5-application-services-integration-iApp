# Copyright (c) 2017 F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
set app %APP_NAME%
set partition %PARTITION%
set aso "sys.application.service /$partition/${app}.app/$app"

set enabled_stats {}

set pool_enabled %POOL_ENABLED%
set vs_enabled %VS_ENABLED%
set http_enabled %HTTP_ENABLED%
set ssl_enabled %SSL_ENABLED%

if { $pool_enabled } { lappend enabled_stats "pool" }
if { $vs_enabled } { lappend enabled_stats "virtual" }
if { $http_enabled } { lappend enabled_stats "http" }
if { $ssl_enabled } { lappend enabled_stats "ssl" }

set virtual_path    "ltm virtual /$partition/${app}.app/%VS_NAME%"
set http_path       "ltm profile http %HTTP_PROFILE%"
set ssl_path        "ltm profile client-ssl %SSL_PROFILE%"
set pool_path       "ltm pool /$partition/${app}.app/%POOL_NAME%"

#puts "app=$app"
#puts "partition=$partition"
#puts "aso=$aso"
#puts "virtual_path=$virtual_path"
#puts "http_path=$http_path"
#puts "pool_path=$pool_path"

# these lists represent strings taken from "show ... field-fmt"
set http_stats {
  get-reqs number-reqs post-reqs resp-2xx-cnt resp-3xx-cnt resp-4xx-cnt
  resp-5xx-cnt resp-bucket-1k resp-bucket-2m resp-bucket-4k resp-bucket-16k
  resp-bucket-32k resp-bucket-64k resp-bucket-128k resp-bucket-512k
  resp-bucket-large
}
set ssl_stats {
  common.cipher-uses.adh-keyxchg common.cipher-uses.aes-bulk common.cipher-uses.aes-gcm-bulk
  common.cipher-uses.des-bulk common.cipher-uses.dh-rsa-keyxchg common.cipher-uses.dhe-dss-keyxchg
  common.cipher-uses.ecdh-ecdsa-keyxchg common.cipher-uses.ecdh-rsa-keyxchg
  common.cipher-uses.ecdhe-ecdsa-keyxchg common.cipher-uses.ecdhe-rsa-keyxchg
  common.cipher-uses.edh-rsa-keyxchg common.cipher-uses.idea-bulk common.cipher-uses.md5-digest
  common.cipher-uses.null-bulk common.cipher-uses.null-digest common.cipher-uses.rc2-bulk
  common.cipher-uses.rc4-bulk common.cipher-uses.rsa-keyxchg common.cipher-uses.sha-digest
  common.cur-compat-conns common.cur-conns common.cur-native-conns common.decrypted-bytes-in
  common.decrypted-bytes-out common.encrypted-bytes-in common.encrypted-bytes-out
  common.fatal-alerts common.fully-hw-accelerated-conns common.handshake-failures
  common.insecure-handshake-accepts common.insecure-handshake-rejects common.insecure-renegotiation-rejects
  common.max-compat-conns common.max-conns common.max-native-conns
  common.non-hw-accelerated-conns common.partially-hw-accelerated-conns
  common.protocol-uses.dtlsv1 common.protocol-uses.sslv2 common.protocol-uses.sslv3
  common.protocol-uses.tlsv1 common.protocol-uses.tlsv1-1 common.protocol-uses.tlsv1-2
  common.secure-handshakes common.tot-compat-conns common.tot-native-conns
}
set virtual_stats {
    clientside.bits-in clientside.bits-out clientside.cur-conns
    clientside.max-conns clientside.pkts-in clientside.pkts-out
    clientside.tot-conns status.availability-state status.enabled-state
    status.status-reason
}
set pool_stats {
    active-member-cnt serverside.bits-in serverside.bits-out
    serverside.cur-conns serverside.max-conns serverside.pkts-in
    serverside.pkts-out serverside.tot-conns
}

# loop over each type of object we want to look at, building the name
# of the path and the stats for it as needed
foreach type $enabled_stats {
    # making this its own variable made the Tcl validator stop throwing
    # a warning - though it _should_ be fine to move it inline w/its use
    set path [set ${type}_path]
    set objs [tmsh::get_status $path raw]
    if { [llength $objs] == 0 } {
        puts "no object found for: $type"
        continue
    }
    set obj [lindex $objs 0]
    #puts "obj=$obj"
    foreach stat [set ${type}_stats] {
        #puts " stat=$stat"
        set value [tmsh::get_field_value $obj $stat]
        #puts " aso=$aso type=$type stat=$stat value=$value"
        # associate the iStat with the app service
        istats::set "$aso string $stat" $value
    }
}

# Set an additional iStat for the size of the pool, as this is not
# stored as a stat but is nice to have when looking at pool health.
# Do that here each run through rather than in the iApp because if
# an external pool is used or strictness was off the size of the
# pool can change and the iApp wouldn't run to adjust the size
if { $pool_enabled } {
  set pools [tmsh::get_config $pool_path]
  set numpools [llength $pools]
  set pool_size 0
  #puts "numpools=$numpools pool_size=$pool_size"
  if { $numpools == 1 } {
    # safe to assume only obj in list is our pool now. grab its size
    # and move along
    set pool [lindex $pools 0]
    set fdx 0
    set fields [tmsh::get_field_names nested $pool]
    set field_count [llength $fields]
    while { $fdx < $field_count } {
      set field [lindex $fields $fdx]
      #puts "field=$field"
      incr fdx
      if { $field eq "members"} {
        set pool_size [llength [tmsh::get_field_value $pool members]]
        #puts "new pool_size=$pool_size"
      }
    }
  }
  istats::set "$aso string total-member-cnt" $pool_size
}
#set tmc [istats::get $aso total-member-cnt]
#puts "tmc=$tmc"
